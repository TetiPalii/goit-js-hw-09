{"mappings":"YAAkBA,SAASC,cAAc,iBAC5BD,SAASC,cAAc,SAc/BC,iBAAiB,UAEtB,YAfuBC,EAgBP,EAhBiBC,EAgBd,KAfXC,EAAgBC,KAAKC,SAAW,GAC/B,IAAIC,SAAQ,SAACC,EAASC,GACXC,YAAW,WACrBN,EACFI,EAAQ,uBAAwCG,OAAfT,EAAS,QAAYS,OAANR,EAAM,OAEpDM,EAAK,sBAAuCE,OAAfT,EAAS,QAAYS,OAANR,EAAM,M,GAErDA,E,KAQFS,MAAK,SAAAC,G,IAAGX,EAAQW,EAARX,SAAUC,EAAKU,EAALV,MACjBW,QAAQC,IAAI,uBAAwCJ,OAAfT,EAAS,QAAYS,OAANR,EAAM,M,IAE3Da,OAAM,SAAAH,G,IAAGX,EAAQW,EAARX,SAAUC,EAAKU,EAALV,MAClBW,QAAQC,IAAI,sBAAqCJ,OAAfT,EAAS,QAAYS,OAANR,EAAM,M,IArB7D,IAAuBD,EAAUC,EACzBC,C","sources":["src/js/03-promises.js"],"sourcesContent":["const stepInput = document.querySelector('[name=\"step\"]');\nconst form = document.querySelector('.form');\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    const timerId = setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit() {\n  createPromise(2, 1500)\n    .then(({ position, delay }) => {\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n\n// const fetchUserFromServer = username => {\n//   return new Promise((resolve, reject) => {\n//     console.log(`Fetching data for ${username}`);\n\n//     setTimeout(() => {\n//       // Change value of isSuccess variable to simulate request status\n//       const isSuccess = true;\n\n//       if (isSuccess) {\n//         resolve('success value');\n//       } else {\n//         reject('error');\n//       }\n//     }, 2000);\n//   });\n// };\n\n// fetchUserFromServer('dfgh')\n//   .then(user => console.log(user))\n//   .catch(error => console.error(error));\n"],"names":["document","querySelector","addEventListener","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","concat","then","param","console","log","catch"],"version":3,"file":"03-promises.0e565bf6.js.map"}